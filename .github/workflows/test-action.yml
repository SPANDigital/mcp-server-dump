name: Test MCP Server Dump Action

on:
  workflow_dispatch:
  push:
    paths:
      - 'action.yml'
      - '.github/workflows/test-action.yml'

jobs:
  test-action:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Create Mock MCP Server Script
        run: |
          cat > mock-mcp-server.sh << 'EOF'
          #!/bin/bash
          
          # Read the initialize request
          read -r line
          
          # Send initialize response
          cat << 'INIT_RESPONSE'
          {"jsonrpc":"2.0","id":1,"result":{"protocolVersion":"2024-11-05","capabilities":{"tools":{"listChanged":true},"resources":{"listChanged":true},"prompts":{"listChanged":true}},"serverInfo":{"name":"test-server","version":"1.0.0"}}}
          INIT_RESPONSE
          
          # Read the initialized notification
          read -r line
          
          # Wait for tools/list request
          while read -r line; do
            case "$line" in
              *"tools/list"*)
                cat << 'TOOLS_RESPONSE'
          {"jsonrpc":"2.0","id":2,"result":{"tools":[{"name":"test_tool","description":"A test tool","inputSchema":{"type":"object","properties":{"input":{"type":"string","description":"Test input"}},"required":["input"]}}]}}
          TOOLS_RESPONSE
                ;;
              *"resources/list"*)
                cat << 'RESOURCES_RESPONSE'
          {"jsonrpc":"2.0","id":3,"result":{"resources":[{"uri":"test://resource","name":"Test Resource","description":"A test resource","mimeType":"text/plain"}]}}
          RESOURCES_RESPONSE
                ;;
              *"prompts/list"*)
                cat << 'PROMPTS_RESPONSE'
          {"jsonrpc":"2.0","id":4,"result":{"prompts":[{"name":"test_prompt","description":"A test prompt","arguments":[{"name":"input","description":"Test input","required":true}]}]}}
          PROMPTS_RESPONSE
                break
                ;;
            esac
          done
          EOF
          chmod +x mock-mcp-server.sh
      
      - name: Test Action with Mock Server - Markdown Output
        id: test-markdown
        uses: ./
        with:
          server-command: './mock-mcp-server.sh'
          format: 'markdown'
          output-file: 'test-output.md'
          verbose: 'true'

      - name: Test Action with Same Mock Server - JSON Output
        id: test-json
        uses: ./
        with:
          server-command: './mock-mcp-server.sh'
          format: 'json'
          output-file: 'test-output.json'
      
      - name: Verify Outputs
        run: |
          echo "=== Checking output files ==="
          ls -la test-output.*
          
          echo "=== Markdown output content ==="
          if [ -f test-output.md ]; then
            echo "✓ Markdown file created"
            head -20 test-output.md
            if grep -q "test_tool" test-output.md; then
              echo "✓ Markdown contains expected tool"
            else
              echo "✗ Markdown missing expected content"
              exit 1
            fi
          else
            echo "✗ Markdown file not found"
            exit 1
          fi
          
          echo "=== JSON output content ==="
          if [ -f test-output.json ]; then
            echo "✓ JSON file created"
            if command -v jq >/dev/null; then
              jq . test-output.json
            else
              cat test-output.json
            fi
            if grep -q "test_tool" test-output.json; then
              echo "✓ JSON contains expected tool"
            else
              echo "✗ JSON missing expected content"
              exit 1
            fi
          else
            echo "✗ JSON file not found"
            exit 1
          fi
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-output.md
            test-output.json